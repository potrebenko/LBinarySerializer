name: Build, Test, and Publish

on:
  push:
    branches: [ "main" ]
    tags:
      - v*
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: true
        default: "1.0.0"
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      publish_package:
        description: 'Publish NuGet package'
        required: false
        default: false
        type: boolean

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  TEST_PROJECT_DIRECTORY: 'tests/LBinarySerializer.Tests/'
  LIBRARY_PROJECT_DIRECTORY: 'src/LBinarySerializer/'
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Cache dependencies
        uses: actions/cache@v3

        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore test dependencies
        run: |
          dotnet restore ${{ env.TEST_PROJECT_DIRECTORY }}

      - name: Build test
        run: |
          dotnet build ${{ env.TEST_PROJECT_DIRECTORY }} --no-restore --configuration Release

      - name: Run tests
        run: |
          dotnet test \
          ${{ env.TEST_PROJECT_DIRECTORY }} \
          --configuration Release \
          --verbosity normal \
          --logger "console;vebosity=detailed"
  build:
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || inputs.skip_tests)

    outputs:
      package-version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name}}" == "workflow_dispatch" ]]; then
            VERSION="${{ inputs.version }}"
          elif [[ ${{ github.ref }} == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="0.1.0-ci-$(date +%Y%m%d%H%M%S)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Restore dependencies
        run: dotnet restore ${{ env.LIBRARY_PROJECT_DIRECTORY }}

      - name: Build
        run: |
          dotnet build \
          ${{ env.LIBRARY_PROJECT_DIRECTORY }} \
          --configuration Release \
          --no-restore \
          -p:Version=${{ steps.version.outputs.version }}

      - name: Pack
        run: |
          dotnet pack \
          ${{ env.LIBRARY_PROJECT_DIRECTORY }} \
          --configuration Release \
          --no-build \
          --output ./artifacts \
          --include-symbols \
          -p:PackageVersion=${{ steps.version.outputs.version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "lbinaryserializer.${{ steps.version.outputs.version }}"
          path: ./artifacts/*.nupkg
          retention-days: 30

  publish:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [test, build]
    if: |
      always() &&
      (needs.test.result == 'success' || inputs.skip_tests) &&
      needs.build.result == 'success' &&
      (
        (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v' )) ||
        (github.event_name == 'workflow_dispatch' && inputs.publish_package)
      )

    environment: production

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: "lbinaryserializer.${{ inputs.version }}"
          path: ./artifacts

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Publish to nuget.org
        run: |
          dotnet nuget push \
          ./artifacts/*.nupkg \
          --api-key "${{ secrets.NUGET_API_KEY }}" \
          --source "https://api.nuget.org/v3/index.json" \
          --skip-duplicate

      - name: Complete publishing
        run: |
          echo 'Publish to nuget version ${{ inputs.version }}'
